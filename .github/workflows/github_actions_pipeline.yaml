# Draft 
name: CI/CD Workflow
description: "home assignment task"
on:
  pull_request:
  push: 
    branches:
      - development
  workflow_dispatch: # should be manual; workflow_dispatch is the keyword you need to run a GitHub Action on demand, without having to push or create a pull request
    branches:
      - main
outputs:
  service-IP:
    description: "k8s service port number"
    # value: ${{ steps.random-number-generator.outputs.random-number }}
    value: ${{ steps.get_external_ip.outputs.ipadd }}    
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  DOCKER_IMAGE_NAME: php-fpm-nginx
  REGISTRY_URL: registry-1.docker.io
  REPO: vladbronfman
  IMAGE_TAG: "latest"
  AWS_REGION: "us-east-1"
  EKS_CLUSTER_NAME: "eks-workshop"
  APP_SERVICE_NAME: "php-fpm-nginx-elb"

  DOCKERFILE_PATH: ./Dockerfile

jobs:
  # setup-k8s-and-registry:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     # Step 1: Create k8s cluster + private docker registry (Skip if already exists)
  #     - name: Check for k8s cluster
  #       id: check_k8s
  #       run: |
  #         if [ ! -z "$(kubectl config current-context)" ]; then
  #           echo "Kubernetes cluster already exists."
  #           exit 0
  #         else
  #           echo "Kubernetes cluster does not exist."
  #           exit 1
  #         fi

  #     - name: Setup Kubernetes Cluster
  #       if: steps.check_k8s.outputs.exitcode == '1'
  #       run: |
  #         # Commands to create Kubernetes cluster 
            # eksctl create cluster --name eks-workshop --region us-east-1 --fargate  --profile github-eks  --zones us-east-1a,us-east-1b,us-east-1c
            # took quite a while 2024-03-22 10:52:06  = 2024-03-22 11:08:09 [âœ”]  EKS cluster "eks-workshop" in "us-east-1" region is ready

  #     - name: Setup Private Docker Registry
  #       if: steps.check_k8s.outputs.exitcode == '1'
  #       run: |
  #         # Commands to setup private Docker registry (e.g., using Docker registry image, Docker Hub, etc.)

  build-and-upload-image:
    runs-on: ubuntu-latest
    # needs: setup-k8s-and-registry
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Create docker image; Step 3: Upload image to Docker registry
      # Turns out Github has an action to combine build with push = going to exploit 
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Build Docker Image
      #   run: |
      #     docker build  -t $REPO/php-fpm-nginx .
      #   env:
      #     # REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
      #     REPO: ${{ secrets.DOCKER_USER }}
      - name: Build and push the Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_USER }}/php-fpm-nginx:latest
            ${{ secrets.DOCKER_USER }}/php-fpm-nginx:${{ github.sha }}

      # # Step 3: Upload image to Docker registry
      # - name: Login to Docker Registry
      #   # run: echo $DOCKER_PASSWORD | docker login $REGISTRY_URL -u $DOCKER_USERNAME --password-stdin 
      #   # env:
      #   #   DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
      #   #   DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      #   #   REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
      #   uses: docker/login-action@v3
      #   with:
      #     #registry: ${{ secrets.REGISTRY_URL }}
      #     username: ${{ secrets.DOCKER_USER }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Push Docker Image
      #   run: docker push $REPO/php-fpm-nginx
      #   env:
      #     REPO: ${{ secrets.DOCKER_USER }}

  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs: build-and-upload-image
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
    # Pipeline
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

     # Step 4: Deploy image to Kubernetes cluster. Due to time restricrtions stick with hardcoded image name
     # have to add validation if the secret exists
      - name: Create a Kubernetes secret for use with a Docker registry (private repo)
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          REGISTRY_URL: "docker.io"
        run: |
          kubectl create secret docker-registry regsecret \
           --docker-server=$REGISTRY_URL \
           --docker-username=$DOCKER_USERNAME \
           --docker-password=$DOCKER_PASSWORD \
           --docker-email=vlad.bronfman@gmail.com \
           --dry-run=client -o yaml | kubectl apply -f - 
      - name: Deploy to Kubernetes
        run: |
         kubectl apply -f ${GITHUB_WORKSPACE}/manifests/deployment.yaml ;
         echo $?;
         kubectl apply -f ${GITHUB_WORKSPACE}/manifests/service.yaml


  #     # Step 5: Get application service external IP
      - name: Get Service External IP
        id: get_external_ip
        # Commands to get service external IP ; >> $GITHUB_OUTPUT ?
        run: |
         # kubectl get svc php-fpm-nginx-deployment -o=jsonpath='{.status.loadBalancer.ingress[0].ip}'
         echo "ipadd=$(kubectl get svc ${APP_SERVICE_NAME} -o=jsonpath='{.status.loadBalancer.ingress[0]}')" >> $GITHUB_OUTPUT
  
      - name: Output External IP
        run: |
            echo "Application Service External IP: ${{ steps.get_external_ip.outputs.ipadd }}"

#     # Step : Clean resources. This step is proprietary for this case only. 
      # - name: Cleanup
      #   id: final
      #   if: always()
      #   # Commands to get service external IP
      #   run: |
      #     kubectl delete secret,deploy,svc --all

