# Draft 
name: CI/CD Workflow

on:
  pull_request:
  push: 
    branches:
      - develop
  workflow_dispatch: # should be manual; workflow_dispatch is the keyword you need to run a GitHub Action on demand, without having to push or create a pull request
    branches:
      - main
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  DOCKER_IMAGE_NAME: php-fpm-nginx
  REGISTRY_URL: registry-1.docker.io

  DOCKERFILE_PATH: ./Dockerfile

jobs:
  # setup-k8s-and-registry:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     # Step 1: Create k8s cluster + private docker registry (Skip if already exists)
  #     - name: Check for k8s cluster
  #       id: check_k8s
  #       run: |
  #         if [ ! -z "$(kubectl config current-context)" ]; then
  #           echo "Kubernetes cluster already exists."
  #           exit 0
  #         else
  #           echo "Kubernetes cluster does not exist."
  #           exit 1
  #         fi

  #     - name: Setup Kubernetes Cluster
  #       if: steps.check_k8s.outputs.exitcode == '1'
  #       run: |
  #         # Commands to create Kubernetes cluster (e.g., using kind, minikube, GKE, etc.)

  #     - name: Setup Private Docker Registry
  #       if: steps.check_k8s.outputs.exitcode == '1'
  #       run: |
  #         # Commands to setup private Docker registry (e.g., using Docker registry image, Docker Hub, etc.)

  build-and-upload-image:
    runs-on: ubuntu-latest
    # needs: setup-k8s-and-registry
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Create docker image
      - name: Build Docker Image
      #           docker build  -t yaakovb/php-fpm-nginx:$(git rev-parse --short HEAD) .
        run: |
          docker build  -t $REPO/yaakovb/php-fpm-nginx .
        env:
          # REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          REPO: ${{ secrets.DOCKER_USER }}



      # Step 3: Upload image to Docker registry
      - name: Login to Docker Registry
        # run: echo $DOCKER_PASSWORD | docker login $REGISTRY_URL -u $DOCKER_USERNAME --password-stdin 
        # env:
        #   DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
        #   DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        #   REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
        uses: docker/login-action@v3
        with:
          #registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Push Docker Image
        run: docker push $REPO/php-fpm-nginx
        env:
          REPO: ${{ secrets.DOCKER_USER }}

  # deploy-to-k8s:
  #   runs-on: ubuntu-latest
  #   needs: build-and-upload-image
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     # Step 4: Deploy image to Kubernetes cluster
  #     - name: Deploy to Kubernetes
  #       run: |
  #         # Commands to deploy image to Kubernetes cluster

  #     # Step 5: Get application service external IP
  #     - name: Get Service External IP
  #       run: |
  #         # Commands to get service external IP
  #         # Example: kubectl get svc my-app -o=jsonpath='{.status.loadBalancer.ingress[0].ip}'
  #       id: get_external_ip

  #     - name: Output External IP
  #       run: echo "Application Service External IP: ${{ steps.get_external_ip.outputs.stdout }}"
